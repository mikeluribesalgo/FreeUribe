package com.example.Prueba;

import java.util.Random;
import java.util.Scanner;

/**
 * Juego simple "Hundir la flota" (consola).
 * Archivo: Prueba.java
 *
 * Uso:
 * - Introduce coordenadas como A5, J10, etc.
 * - Letras A-J (o a-j) para columnas, números 1-10 para filas.
 * - El juego coloca barcos aleatoriamente y espera que los hundas todos.
 */
public class Prueba {
    private static final int SIZE = 10;
    private static final char UNKNOWN = '·';
    private static final char MISS = 'O';
    private static final char HIT = 'X';
    private static final char SHIP = 'S'; // interno (no mostrar)
    //ene

    // Barcos: portaviones 5, acorazado 4, crucero 3, submarino 3, destructor 2
    private static final int[] SHIPS = {5, 4, 3, 3, 2};

    private char[][] board;      // internal board with ships
    private char[][] display;    // what player sees
    private int remainingCells;

    public Prueba() {
        board = new char[SIZE][SIZE];
        display = new char[SIZE][SIZE];
        initBoards();
        placeAllShipsRandom();
    }

    private void initBoards() {
        for (int r = 0; r < SIZE; r++) {
            for (int c = 0; c < SIZE; c++) {
                board[r][c] = '.';
                display[r][c] = UNKNOWN;
            }
        }
    }

    private void placeAllShipsRandom() {
        Random rnd = new Random();
        for (int len : SHIPS) {
            boolean placed = false;
            while (!placed) {
                boolean horiz = rnd.nextBoolean();
                int r = rnd.nextInt(SIZE);
                int c = rnd.nextInt(SIZE);

                // compute end coordinates
                int endR = horiz ? r : r + len - 1;
                int endC = horiz ? c + len - 1 : c;

                if (endR >= SIZE || endC >= SIZE) continue;

                // check overlap
                boolean ok = true;
                for (int i = 0; i < len; i++) {
                    int rr = horiz ? r : r + i;
                    int cc = horiz ? c + i : c;
                    if (board[rr][cc] == SHIP) { ok = false; break; }
                    // also avoid adjacency if desired (optional)
                }
                if (!ok) continue;

                // place ship
                for (int i = 0; i < len; i++) {
                    int rr = horiz ? r : r + i;
                    int cc = horiz ? c + i : c;
                    board[rr][cc] = SHIP;
                }
                remainingCells += len;
                placed = true;
            }
        }
    }

    private void printDisplay() {
        System.out.print("   ");
        for (int c = 0; c < SIZE; c++) System.out.printf("%2c", 'A' + c);
        System.out.println();
        for (int r = 0; r < SIZE; r++) {
            System.out.printf("%2d ", r + 1);
            for (int c = 0; c < SIZE; c++) {
                System.out.printf("%2c", display[r][c]);
            }
            System.out.println();
        }
    }

    private boolean shoot(String input) {
        input = input.trim().toUpperCase();
        if (input.length() < 2) return false;

        // parse letter(s) for column (allow A-J)
        char colChar = input.charAt(0);
        if (colChar < 'A' || colChar > 'J') return false;
        int col = colChar - 'A';

        // parse remaining as row number
        String rowStr = input.substring(1).trim();
        int rowNum;
        try { rowNum = Integer.parseInt(rowStr); }
        catch (NumberFormatException e) { return false; }
        if (rowNum < 1 || rowNum > SIZE) return false;
        int row = rowNum - 1;

        // already tried?
        if (display[row][col] == MISS || display[row][col] == HIT) {
            System.out.println("Ya has disparado ahí.");
            return true; // valid input but no state change
        }

        if (board[row][col] == SHIP) {
            display[row][col] = HIT;
            board[row][col] = 'x'; // mark as hit internally
            remainingCells--;
            System.out.println("¡Tocado!");
            if (isShipSunk(row, col)) {
                System.out.println("¡Hundido!");
            }
        } else {
            display[row][col] = MISS;
            System.out.println("Agua.");
        }
        return true;
    }

    // check if the particular ship containing (r,c) has any remaining 'S'
    private boolean isShipSunk(int r, int c) {
        // scan in 4 directions to find contiguous SHIP cells (we replaced hit with 'x')
        // We consider both orientations by scanning along row and column
        // Check horizontal
        int left = c;
        while (left - 1 >= 0 && (board[r][left - 1] == SHIP || board[r][left - 1] == 'x')) left--;
        int right = c;
        while (right + 1 < SIZE && (board[r][right + 1] == SHIP || board[r][right + 1] == 'x')) right++;
        boolean foundSInRow = false;
        for (int cc = left; cc <= right; cc++) {
            if (board[r][cc] == SHIP) { foundSInRow = true; break; }
        }
        if (!foundSInRow) return true; // no remaining S horizontally -> sunk

        // Check vertical
        int up = r;
        while (up - 1 >= 0 && (board[up - 1][c] == SHIP || board[up - 1][c] == 'x')) up--;
        int down = r;
        while (down + 1 < SIZE && (board[down + 1][c] == SHIP || board[down + 1][c] == 'x')) down++;
        for (int rr = up; rr <= down; rr++) {
            if (board[rr][c] == SHIP) return false;
        }
        // if we reached here, no vertical S remain either -> sunk
        return true;
    }

    public void start() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Hundir la flota - versión consola");
        System.out.println("Introduce coordenadas como A5 o J10. Escribe 'salir' para terminar.");
        while (remainingCells > 0) {
            printDisplay();
            System.out.print("Tu tiro: ");
            String line = sc.nextLine();
            if (line == null) break;
            line = line.trim();
            if (line.equalsIgnoreCase("salir") || line.equalsIgnoreCase("exit")) {
                System.out.println("Juego terminado. Gracias por jugar.");
                return;
            }
            boolean ok = shoot(line);
            if (!ok) System.out.println("Entrada no válida. Intenta por ejemplo B7.");
        }
        System.out.println("¡Felicidades! Has hundido toda la flota.");
        printFinalBoard();
    }

    private void printFinalBoard() {
        System.out.println("Tablero final (S = barco, X = tocado, O = agua):");
        System.out.print("   ");
        for (int c = 0; c < SIZE; c++) System.out.printf("%2c", 'A' + c);
        System.out.println();
        for (int r = 0; r < SIZE; r++) {
            System.out.printf("%2d ", r + 1);
            for (int c = 0; c < SIZE; c++) {
                char out;
                if (board[r][c] == SHIP) out = SHIP;
                else if (board[r][c] == 'x') out = HIT;
                else out = display[r][c] == UNKNOWN ? MISS : display[r][c];
                System.out.printf("%2c", out);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        new Prueba().start();
    }
}